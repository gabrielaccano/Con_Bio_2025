View(matrix_p_b)
matrix_p_b <- matrix_original %>%
left_join(updated_p_and_b, by = c("nectar_species" = "plant_name", "butterfly_species" = "butterfly_common_name")) %>%
mutate(
nectar_species = ifelse(!is.na(plant_code), plant_code, nectar_species),
butterfly_species = ifelse(!is.na(butterfly_code), butterfly_code, butterfly_species)
) %>%
select(-plant_code, -butterfly_code)
View(matrix_original)
matrix_p_b <- matrix_original %>%
mutate(
# Replace butterfly_species with butterfly_code based on matching butterfly_common_name
butterfly_species = ifelse(butterfly_species %in% butterfly_common_name,
butterfly_code, butterfly_species)
) %>%
select(-butterfly_common_name)  # Remove butterfly_common_name column if you don't need it anymore
View(matrix_p_b)
View(matrix_p_b)
library(readr)
original_matrix <- read_csv("Matrix_nt_2016-04-28 - Copy(Matrix).csv")
View(original_matrix)
library(readr)
updated_p_and_b <- read_csv("Matrix_nt_2016-04-28 - Copy(updated_p_and_b) (1).csv")
View(updated_p_and_b)
library (tidyverse)
library (readxl)
library (dplyr)
View(original_matrix)
print(pb_matrix)
mutate(nectar_species= ifelse(!is.na(plant_code), plant_code, nectar_species), butterfly_species= ifelese(!is.na(butterfly_code), butterfly_code, butterfly_species)) |> select (-plant_code, -butterfly_code)
left_join(updated_p_and_b, by= c('nectar_species'='plant_name', 'butterfly_species'= 'butterfly_common_name') |>
mutate(nectar_species= ifelse(!is.na(plant_code), plant_code, nectar_species), butterfly_species= ifelese(!is.na(butterfly_code), butterfly_code, butterfly_species)) |> select (-plant_code, -butterfly_code)
mutate(nectar_species= ifelse(!is.na(plant_code), plant_code, nectar_species), butterfly_species= ifelese(!is.na(butterfly_code), butterfly_code, butterfly_species)) |> select (-plant_code, -butterfly_code)
mutate(nectar_species= ifelse(!is.na(plant_code), plant_code, nectar_species), butterfly_species= ifelse(!is.na(butterfly_code), butterfly_code, butterfly_species)) |> select (-plant_code, -butterfly_code)
mutate(nectar_species= ifelse(!is.na(plant_code), plant_code, nectar_species), butterfly_species= ifelse(!is.na(butterfly_code), butterfly_code, butterfly_species)) |> select (-plant_code, -butterfly_code)
mutate(nectar_species= ifelse(!is.na("plant_code"), plant_code, nectar_species), butterfly_species= ifelse(!is.na("butterfly_code"), butterfly_code, butterfly_species)) |> select (-plant_code, -butterfly_code)
original_matrix |>
left_join(updated_p_and_b, by= c('nectar_species'='plant_name', 'butterfly_species'= 'butterfly_common_name')
left_join(updated_p_and_b, by= c('nectar_species'='plant_name', 'butterfly_species'= 'butterfly_common_name')
test_pb<- original_matrix |>
left_join(updated_p_and_b, by= c('nectar_species'='plant_name', 'butterfly_species'= 'butterfly_common_name')
View(updated_p_and_b)
view(testpb)
view(test_pb)
left_join(updated_p_and_b, by= c('nectar_species'='plant_name', 'butterfly_species'= 'butterfly_common_name')
test_pb <- original_matrix |> left_join(updated_p_and_b, by= c('nectar_species'='plant_name', 'butterfly_species'= 'butterfly_common_name')
#pb_matrix
test_pb <- original_matrix |> left_join(updated_p_and_b, by= c('nectar_species'='plant_name', 'butterfly_species'= 'butterfly_common_name')
#pb_matrix
test_pb <- original_matrix |> left_join(updated_p_and_b, by= c('nectar_species'='plant_name', 'butterfly_species'= 'butterfly_common_name'))
test_pb <- original_matrix |> left_join(updated_p_and_b, by= c('nectar_species'='plant_name', 'butterfly_species'= 'butterfly_common_name'))
test_pb <- original_matrix |> left_join(updated_p_and_b, by= c('nectar_species'='plant_name', 'butterfly_species'= 'butterfly_name'))
View(test_pb)
#pb_matrix
test_pb <- original_matrix |> left_join(updated_p_and_b, by= c('nectar_species'='plant_name', 'butterfly_species'= 'butterfly_name'))|>
mutate(nectar_species= ifelse(!is.na("plant_code"), plant_code, nectar_species), butterfly_species= ifelse(!is.na("butterfly_code"), butterfly_code, butterfly_species)) |> select (-plant_code, -butterfly_code)
View(test_pb)
updated_p_and_b |> select(plant_name)
replace_plant_code <- updated_p_and_b |> select(plant_name, plant_code)
install.packages("stringi")
install.packages("stringi")
library(stringi)
maybe_replaced_names <- original_matrix[,"nectar_species" := stri_replace_all_regex("nectar_species","^"%s+%replace_plant_code[,"plant_name"]%+%"$",replace_plant_code[,"plant_code"], vectorize_all = FALSE)]
maybe_replaced_names <- original_matrix[, nectar_species := stri_replace_all_regex(nectar_species,"^"%s+%replace_plant_code[,plant_name]%+%"$",replace_plant_code[,plant_code], vectorize_all = FALSE)]
# Replace nectar_species with plant_code using str_replace
original_matrix <- original_matrix %>%
left_join(replace_plant_code, by = c("nectar_species" = "plant_name")) %>%
mutate(
nectar_species = ifelse(!is.na(plant_code), plant_code, nectar_species)
) %>%
select(-plant_code)
View(original_matrix)
butt_test_matrix <- original_matrix |>
left_join(replace_plant_code, by = c("butterfly_species" = "butterfly_name")) |>
mutate(
butterfly_species = ifelse(!is.na(butterfly_code), butterfly_code, butterfly_species)
) |>
select(-butterfly_code)
names(original_matrix)
names(updated_p_and_b)
butt_test_matrix <- original_matrix |>
left_join(updated_p_and_b, by = c("butterfly_species" = "butterfly_name")) |>
mutate(
butterfly_species = ifelse(!is.na(butterfly_code), butterfly_code, butterfly_species)
) |>
select(-butterfly_code)
View(butt_test_matrix)
replace_butterfly_code <- updated_p_and_b |> select(butterfly_name,butterfly_code)
butt_test_matrix <- original_matrix |>
left_join(replace_butterfly_code, by = c("butterfly_species" = "butterfly_name")) |>
mutate(
butterfly_species = ifelse(!is.na(butterfly_code), butterfly_code, butterfly_species)
) |>
select(-butterfly_code)
View(butt_test_matrix)
butt_test_matrix <- original_matrix |>
left_join(replace_butterfly_code, by = c("butterfly_species" = "butterfly_name"))
View(butt_test_matrix)
# Replace nectar_species with plant_code using str_replace
butt_test_matrix <- original_matrix |>
left_join(replace_plant_code, by = c("nectar_species" = "plant_name")) |>
mutate(
nectar_species = ifelse(!is.na(plant_code), plant_code, nectar_species)
) |>
left_join(replace_butterfly_code, by = c("butterfly_species" = "butterfly_name")) |>
mutate(
butterfly_species = ifelse(!is.na(butterfly_code), butterfly_code, butterfly_species)) |>
select(-plant_code, -butterfly_code)
original_matrix |>
left_join(replace_plant_code, by = c("nectar_species" = "plant_name")) |>
mutate(
nectar_species = ifelse(!is.na(plant_code), plant_code, nectar_species)
)
updated_p_and_b |> filter(plant_name == "Apocynum cannabinum �")
View(butt_test_matrix)
View(butt_test_matrix)
# Replace nectar_species with plant_code using str_replace
butt_test_matrix <- original_matrix |>
left_join(replace_plant_code, by = c("nectar_species" = "plant_name")) |>
mutate(
nectar_species = ifelse(!is.na(plant_code), plant_code, nectar_species)
) |>
left_join(replace_butterfly_code, by = c("butterfly_species" = "butterfly_name")) |>
mutate(
butterfly_species = ifelse(!is.na(butterfly_code), butterfly_code, butterfly_species)) |>
select(-plant_code, -butterfly_code)
View(butt_test_matrix)
updated_p_and_b |> filter(plant_name == "Apocynum cannabinum �")
updated_p_and_b |> filter(plant_name == "White Flower")
updated_p_and_b |> filter(butterfly_name == "REGAL")
original_matrix |> filter(unique(butterfly_species))
unique(original_matrix$butterfly_species)
unique(original_matrix$plant_species)
unique(original_matrix$nectar_species)
vibes <- setdiff(original_matrix$nectar_species,updated_p_and_b$plant_name)
print(vibes)
vibes_2 <- setdiff(vibes, updated_p_and_b$plant_code)
print(vibes_2)
View(original_matrix)
rm(original_matrix)
library(readr)
original_matrix <- read_csv("Matrix_nt_2016-04-28 - Copy(Matrix).csv")
View(original_matrix)
vibes_2 <- setdiff(vibes, ?updated_p_and_b$plant_code)
library(readr)
original_matrix <- read_csv("Matrix_nt_2016-04-28 - Copy(Matrix).csv")
View(original_matrix)
> vibes_2 <- setdiff(vibes, updated_p_and_b$butterfly_code)
vibes <- setdiff(original_matrix$butterfly_species,updated_p_and_b$butterfly_name) |>
print(vibes)
vibes <- setdiff(original_matrix$butterfly_species,updated_p_and_b$butterfly_name)
print(vibes)
vibes3<-setdiff(vibes, updated_p_and_b$butterfly_code)
print(vibes3)
library(readr)
updated_p_and_b <- read_csv("Matrix_nt_2016-04-28 - Copy(updated_p_and_b).csv")
View(updated_p_and_b)
library (dplyr)
#pb_matrix
test_pb <- original_matrix |> left_join(updated_p_and_b, by= c('nectar_species'='plant_name', 'butterfly_species'= 'butterfly_name'))|>
mutate(nectar_species= ifelse(!is.na("plant_code"), plant_code, nectar_species), butterfly_species= ifelse(!is.na("butterfly_code"), butterfly_code, butterfly_species)) |> select (-plant_code, -butterfly_code)
View(test_pb)
# Replace nectar_species with plant_code using str_replace
butt_test_matrix <- original_matrix |>
left_join(replace_plant_code, by = c("nectar_species" = "plant_name")) |>
mutate(
nectar_species = ifelse(!is.na(plant_code), plant_code, nectar_species)
) |>
left_join(replace_butterfly_code, by = c("butterfly_species" = "butterfly_name")) |>
mutate(
butterfly_species = ifelse(!is.na(butterfly_code), butterfly_code, butterfly_species)) |>
select(-plant_code, -butterfly_code)
print(butt_test_matrix)
original_matrix$nectar_species <- mapply(function(species, plant) {
gsub(species, plant, species)
}, original_matrix$nectar_species, updated_p_and_b$plant_code)
test_plant <- original_matrix$nectar_species
test_plant<- updated_p_and_b$plant_code[match(original_matrix$nectar_species, updated_p_and_b$plant_name)]
print(test_plant)
view(original_matrix)
test_bp<- original_matrix
test_plant<- updated_p_and_b$plant_code[match(test_bp$nectar_species, updated_p_and_b$plant_name)]
view(test_bp)
print(test_plant)
dplyr::left_join(original_matrix |> dplyr::rename(plant_name = nectar_species), updated_p_and_b )
dplyr::left_join(original_matrix |> dplyr::rename(plant_code = nectar_species), updated_p_and_b)
library(readr)
updated_p_and_b <- read_csv("Matrix_nt_2016-04-28 - Copy(updated_p_and_b).csv")
View(updated_p_and_b)
library(readr)
original_matrix <- read_csv("Matrix_nt_2016-04-28 - Copy(Matrix).csv")
View(original_matrix)
# Replace nectar_species in original_matrix with corresponding plant_code
original_matrix$nectar_species <- sapply(original_matrix$nectar_species,
function(x) plant_code_map[x])
# Create a named vector for plant_name -> plant_code mapping
plant_code_map <- setNames(updated_p_and_b$plant_code, updated_p_and_b$plant_name)
# Replace nectar_species in original_matrix with corresponding plant_code
original_matrix$nectar_species <- sapply(original_matrix$nectar_species,
function(x) plant_code_map[x])
# Result
print(original_matrix)
# Create a named vector for plant_name -> plant_code mapping
butterfly_code_map <- setNames(updated_p_and_b$butterfly_code, updated_p_and_b$butterfly_name)
# Replace nectar_species in original_matrix with corresponding plant_code
original_matrix$butterfly_species <- sapply(original_matrix$butterfly_species,
function(x) butterfly_code_map[x])
view(original_matrix)
write.csv(original_matrix,"C:\Users\GCano\Documents\GitHub\Con_Bio_introduced\updated_matrix.csv", row.names = FALSE)
write.csv(original_matrix,"C:/Users/GCano/Documents/GitHub/Con_Bio_introduced/updated_matrix.csv", row.names = FALSE)
library(readr)
updated_matrix <- read_csv("updated_matrix.csv")
View(updated_matrix)
prep_matrix<- na.omit(updated_matrix)
View(prep_matrix)
prep_matrix<- drop_na(updated_matrix$nectar_species, updated_matrix$butterfly_species)
prep_matrix[!is.na(updated_matrix$nectar_species), !is.na(updated_matrix$butterfly_species)]
prep_matrix<- updated_matrix
prep_matrix[!is.na(updated_matrix$nectar_species) | !is.na(updated_matrix$butterfly_species)]
prep_matrix<- updated_matrix [!is.na(updated_matrix$nectar_species) | !is.na(updated_matrix$butterfly_species)]
prep_matrix<-updated_matrix
prep_matrix<- prep_matrix [!is.na(updated_matrix$nectar_species) | !is.na(updated_matrix$butterfly_species)]
prep_matrix<- prep_matrix [!is.na(updated_matrix$nectar_species) | !is.na(updated_matrix$butterfly_species),]
View(prep_matrix)
prep_matrix<- prep_matrix [!is.na(updated_matrix$nectar_species) & !is.na(updated_matrix$butterfly_species),]
prep_matrix<-updated_matrix
prep_matrix<- prep_matrix [!is.na(updated_matrix$nectar_species) & !is.na(updated_matrix$butterfly_species),]
View(prep_matrix)
introduced_plants<-c ("ELUM", "LOCO6", "SECUR3", "LONIC", "CENTA", "BRASS", "LEVU", "ROMU", "CIAR4", "LIVU2", "POTEN", "DIAR", "FRAGA", "LIGUS2", "ECVU", "DACA6", "AGERA2")
introduced_matrix<- prep_matrix
introduced_matrix$native_status <-ifelse(introduced_plants== "introduced", "introduced", "native" )
intro_matrix<-prep_matrix
intro_matrix$native_status<- ifelse(prep_matrix$nectar_species %in% introduced_plants, "introduced", "native")
View(intro_matrix)
count(native_status)
status_counts <- table(intro_matrix$native_status)
print(status_counts['introduced'])
general_butterflies <- c("CEPE", "CESP", "EPCL", "EUCL","EULI", "LIARC", "LIART", "LICAR", "LYPH", "MECY", "NYAN", "PAGL", "PAPI", "PAPO", "PATR", "PHSE", "PHTH", "PIRA", "POSP", "STME", "VASP")
general_matrix$diet_pref<-ifelse(intro_matrix$butterfly_species %in% general_butterflies, "generalist", "specialist")
library (tidyverse)
library (readxl)
library (dplyr)
library(readr)
updated_p_and_b <- read_csv("Matrix_nt_2016-04-28 - Copy(updated_p_and_b).csv")
View(updated_p_and_b)
library(readr)
original_matrix <- read_csv("Matrix_nt_2016-04-28 - Copy(Matrix).csv")
View(original_matrix)
# Create a named vector for plant_name -> plant_code mapping
plant_code_map <- setNames(updated_p_and_b$plant_code, updated_p_and_b$plant_name)
library(readr)
updated_p_and_b <- read_csv("Matrix_nt_2016-04-28 - Copy(updated_p_and_b).csv")
View(updated_p_and_b)
# Create a named vector for plant_name -> plant_code mapping
plant_code_map <- setNames(updated_p_and_b$plant_code, updated_p_and_b$plant_name)
# Replace nectar_species in original_matrix with corresponding plant_code
original_matrix$nectar_species <- sapply(original_matrix$nectar_species,
function(x) plant_code_map[x])
# Result
print(original_matrix)
# Create a named vector for plant_name -> plant_code mapping
butterfly_code_map <- setNames(updated_p_and_b$butterfly_code, updated_p_and_b$butterfly_name)
# Replace nectar_species in original_matrix with corresponding plant_code
original_matrix$butterfly_species <- sapply(original_matrix$butterfly_species,
function(x) butterfly_code_map[x])
view(original_matrix)
library(readr)
updated_matrix <- read_csv("updated_matrix.csv")
View(updated_matrix)
prep_matrix<-updated_matrix
prep_matrix<- prep_matrix [!is.na(updated_matrix$nectar_species) & !is.na(updated_matrix$butterfly_species),]
introduced_plants<-c ("ELUM", "LOCO6", "SECUR3", "LONIC", "CENTA", "BRASS", "LEVU", "ROMU", "CIAR4", "LIVU2", "POTEN", "DIAR", "FRAGA", "LIGUS2", "ECVU", "DACA6", "AGERA2")
intro_matrix<-prep_matrix
intro_matrix$native_status<- ifelse(prep_matrix$nectar_species %in% introduced_plants, "introduced", "native")
general_butterflies <- c("CEPE", "CESP", "EPCL", "EUCL","EULI", "LIARC", "LIART", "LICAR", "LYPH", "MECY", "NYAN", "PAGL", "PAPI", "PAPO", "PATR", "PHSE", "PHTH", "PIRA", "POSP", "STME", "VASP")
general_matrix<-intro_matrix
general_matrix$diet_pref<-ifelse(intro_matrix$butterfly_species %in% general_butterflies, "generalist", "specialist")
View(general_matrix)
ggplot(general_matrix)+
geom_boxplot(x=introduced_plants, y=frequency(introduced_plants))
ggplot(general_matrix)+
geom_boxplot(x=introduced_plants, y=frequency)
visit_summary <- general_matrix |>
group_by(native_status)
view(visit_summary)
behavior_3_frequency <- general_matrix %>%
filter(behavior == 3) %>%  # Filter rows where behavior is 3
group_by(native_status) %>%  # Group by native_status (Native or Introduced)
summarise(FrequencyOfBehavior3 = n())
behavior_3_frequency <- general_matrix |>
filter(Behavior == 3) |>  # Filter rows where behavior is 3
group_by(native_status) |>  # Group by native_status (Native or Introduced)
summarise(FrequencyOfBehavior3 = n())
ggplot(general_matrix)+
geom_boxplot(x=introduced_plants, y=)
behavior_3_frequency <- general_matrix |>
filter(Behavior == 3) |>  # Filter rows where behavior is 3
group_by(native_status) |>  # Group by native_status (Native or Introduced)
summarise(FrequencyOfBehavior3 = n())
ggplot(behavior_3_frequency, aes(x = native_status, y = FrequencyOfBehavior3, fill = native_status)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Native Status", y = "Frequency of Behavior 3", title = "Frequency of Behavior 3 by Native Status") +
theme_minimal()
# Create a boxplot with native_status on the x-axis and frequency of Behavior 3 on the y-axis
ggplot(behavior_3_data, aes(x = native_status, y = behavior))
behavior_3_data <- general_matrix %>%
filter(Behavior == 3)
# Create a boxplot with native_status on the x-axis and frequency of Behavior 3 on the y-axis
ggplot(behavior_3_data, aes(x = native_status, y = behavior))
# Create a boxplot with native_status on the x-axis and frequency of Behavior 3 on the y-axis
ggplot(behavior_3_data, aes(x = native_status, y = Behavior))
behavior_3_data <- general_matrix %>%
filter(Behavior == 3)
# Aggregate the data by native_status, counting occurrences of Behavior 3
behavior_3_count <- behavior_3_data %>%
group_by(native_status) %>%
summarise(CountOfBehavior3 = n())  # Count how many times Behavior 3 occurred
# Create a bar graph
ggplot(behavior_3_count, aes(x = native_status, y = CountOfBehavior3, fill = native_status)) +
geom_bar(stat = "identity", color = "black") +
labs(x = "Native Status", y = "Count of Behavior 3", title = "Count of Behavior 3 by Native Status") +
theme_minimal() +
scale_fill_manual(values = c("Native" = "lightblue", "Introduced" = "lightcoral"))  # Custom colors
behavior_3_data <- general_matrix %>%
filter(Behavior == 3)
diet_proportion_data <- behavior_3_data %>%
group_by(native_status, diet_pref) %>%
summarise(CountOfBehavior3 = n(), .groups = "drop")  # Count how many times Behavior 3 occurred by diet preference
# Create a stacked bar plot
ggplot(diet_proportion_data, aes(x = native_status, y = CountOfBehavior3, fill = diet_pref)) +
geom_bar(stat = "identity") +  # Use bars to represent counts
labs(x = "Native Status", y = "Count of Behavior 3", title = "Count of Behavior 3 by Native Status and Diet Preference") +
scale_fill_manual(values = c("Carnivore" = "orange", "Herbivore" = "green", "Omnivore" = "blue")) +  # Customize colors for diet preference
theme_minimal()
behavior_3_data <- general_matrix %>%
filter(Behavior == 3)
diet_proportion_data <- behavior_3_data %>%
group_by(native_status, diet_pref) %>%
summarise(CountOfBehavior3 = n(), .groups = "drop")  # Count how many times Behavior 3 occurred by diet preference
# Create a stacked bar plot
ggplot(diet_proportion_data, aes(x = native_status, y = CountOfBehavior3, fill = diet_pref)) +
geom_bar(stat = "identity") +  # Use bars to represent counts
labs(x = "Native Status", y = "Count of Behavior 3", title = "Count of Behavior 3 by Native Status and Diet Preference") +
scale_fill_manual(values = c("generalist" = "orange", "specialist" = "green")) +  # Customize colors for diet preference
theme_minimal()
# Create a stacked bar plot
ggplot(diet_proportion_data, aes(x = native_status, y = CountOfBehavior3, fill = diet_pref)) +
geom_bar(stat = "identity") +  # Use bars to represent counts
labs(x = "Native Status", y = "Count of Behavior 3", title = "Count of Behavior 3 by Native Status and Diet Preference") +
scale_fill_manual(values = c("generalist" = "lightgreen", "specialist" = "lightblue")) +  # Customize colors for diet preference
theme_minimal()
# Create a stacked bar plot
ggplot(diet_proportion_data, aes(x = diet_pref, y = CountOfBehavior3, fill = native_status)) +
geom_bar(stat = "identity") +  # Use bars to represent counts
labs(x = "Native Status", y = "Count of Behavior 3", title = "Count of Behavior 3 by Native Status and Diet Preference") +
scale_fill_manual(values = c("generalist" = "lightgreen", "specialist" = "lightblue")) +  # Customize colors for diet preference
theme_minimal()
# Create a stacked bar plot
ggplot(diet_proportion_data, aes(x = diet_pref, y = CountOfBehavior3, fill = native_status)) +
geom_bar(stat = "identity") +  # Use bars to represent counts
labs(x = "Native Status", y = "Count of Behavior 3", title = "Count of Behavior 3 by Native Status and Diet Preference") +
scale_fill_manual(values = c("native" = "lightgreen", "introduced" = "lightblue")) +  # Customize colors for diet preference
theme_minimal()
proportion_data <- general_matrix %>%
group_by(diet_pref, native_status) %>%
summarise(Count = n(), .groups = "drop") %>%
group_by(diet_pref) %>%
mutate(Proportion = Count / sum(Count))  # Calculate the proportion of native vs introduced within each species type
# Create a bar plot showing the proportions
ggplot(proportion_data, aes(x = diet_pref, y = Proportion, fill = native_status)) +
geom_bar(stat = "identity", position = "fill") +  # 'fill' stacks the bars to show proportions
labs(x = "Species Type", y = "Proportion of Native vs Introduced", title = "Proportion of Native vs Introduced Species by Generalist/Specialist") +
scale_fill_manual(values = c("Native" = "lightblue", "Introduced" = "lightcoral")) +  # Customize fill colors
theme_minimal() +
# Create a bar plot showing the proportions
ggplot(proportion_data, aes(x = diet_pref, y = Proportion, fill = native_status)) +
geom_bar(stat = "identity", position = "fill") +  # 'fill' stacks the bars to show proportions
labs(x = "Species Type", y = "Proportion of Native vs Introduced", title = "Proportion of Native vs Introduced Species by Generalist/Specialist") +
scale_fill_manual(values = c("Native" = "lightblue", "Introduced" = "lightcoral")) +  # Customize fill colors
theme_minimal()
# Create a bar plot showing the proportions
ggplot(proportion_data, aes(x = diet_pref, y = Proportion, fill = native_status)) +
geom_bar(stat = "identity", position = "fill") +  # 'fill' stacks the bars to show proportions
labs(x = "Species Type", y = "Proportion of Native vs Introduced", title = "Proportion of Native vs Introduced Species by Generalist/Specialist") +
scale_fill_manual(values = c("native" = "lightblue", "introduced" = "lightcoral")) +  # Customize fill colors
theme_minimal()
plant_proportion_data <- general_matrix %>%
group_by(diet_pref, native_status) %>%
summarise(Count = n(), .groups = "drop") %>%
group_by(native_status) %>%
mutate(Proportion = Count / sum(Count))
ggplot(plant_proportion_data, aes(x = native_status, y = Proportion, fill = diet_pref)) +
geom_bar(stat = "identity", position = "fill") +  # 'fill' stacks the bars to show proportions
labs(x = "Species Type", y = "Proportion of Native vs Introduced", title = "Proportion of Native vs Introduced Species by Generalist/Specialist") +
scale_fill_manual(values = c("generalist" = "lightblue", "specialist" = "lightcoral")) +  # Customize fill colors
theme_minimal()
# Create a bar plot showing the proportions
ggplot(proportion_data, aes(x = diet_pref, y = Proportion, fill = native_status)) +
geom_bar(stat = "identity", position = "dodge") +  # 'fill' stacks the bars to show proportions
labs(x = "Species Type", y = "Proportion of Native vs Introduced", title = "Proportion of Native vs Introduced Species by Generalist/Specialist") +
scale_fill_manual(values = c("native" = "lightblue", "introduced" = "lightcoral")) +  # Customize fill colors
theme_minimal()
ggplot(plant_proportion_data, aes(x = native_status, y = Proportion, fill = diet_pref)) +
geom_bar(stat = "identity", position = "dodge") +  # 'fill' stacks the bars to show proportions
labs(x = "Species Type", y = "Proportion of Native vs Introduced", title = "Proportion of Native vs Introduced Species by Generalist/Specialist") +
scale_fill_manual(values = c("generalist" = "lightblue", "specialist" = "lightcoral")) +  # Customize fill colors
theme_minimal()
# Create a bar plot showing the proportions
ggplot(proportion_data, aes(x = diet_pref, y = Proportion, fill = native_status)) +
geom_bar(stat = "identity", position = "fill") +  # 'fill' stacks the bars to show proportions
labs(x = "Species Type", y = "Proportion of Native vs Introduced", title = "Proportion of Native vs Introduced Species by Generalist/Specialist") +
scale_fill_manual(values = c("native" = "lightblue", "introduced" = "lightcoral")) +  # Customize fill colors
theme_minimal()
introduced_species <- general_matrix %>%
filter(native_status == "introduced")
# Step 2: Find the 5 most common introduced species by nectar_species
top_5_introduced_species <- introduced_species %>%
group_by(nectar_species) %>%
summarise(count = n(), .groups = "drop") %>%
arrange(desc(count)) %>%
head(5)  # Select the top 5 most common introduced species
# Step 3: Filter the original dataset to include only the top 5 introduced species
top_5_data <- introduced_species %>%
filter(nectar_species %in% top_5_introduced_species$nectar_species)
# Step 4: Group by nectar_species and diet_pref, and calculate the count of occurrences for each combination
test_diet_prop <- top_5_data %>%
group_by(nectar_species, diet_pref) %>%
summarise(count = n(), .groups = "drop")
# Step 5: Create a bar plot showing the proportion of generalists vs specialists using each introduced plant
ggplot(test_diet_prop, aes(x = nectar_species, y = count, fill = diet_pref)) +
geom_bar(stat = "identity", position = "dodge") +  # Side-by-side bars
labs(x = "Introduced Species", y = "Count of Generalists/Specialists",
title = "Diet Preference for the 5 Most Common Introduced Species") +
scale_fill_manual(values = c("generalist" = "lightblue", "specialist" = "lightcoral")) +  # Customize colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
introduced_species <- general_matrix %>%
filter(native_status == "introduced")
# Step 2: Find the 5 most common introduced species by nectar_species
top_5_introduced_species <- introduced_species %>%
group_by(nectar_species) %>%
summarise(count = n(), .groups = "drop") %>%
arrange(desc(count)) %>%
head(5)  # Select the top 5 most common introduced species
# Step 3: Filter the original dataset to include only the top 5 introduced species
top_5_data <- introduced_species %>%
filter(nectar_species %in% top_5_introduced_species$nectar_species)
# Step 4: Group by nectar_species and diet_pref, and calculate the count of occurrences for each combination
test_diet_prop <- top_5_data %>%
group_by(nectar_species, diet_pref) %>%
summarise(count = n(), .groups = "drop")
test_diet_prop <- test_diet_prop %>%
group_by(nectar_species) %>%
mutate(Proportion = count / sum(count))
# Step 5: Create a bar plot showing the proportion of generalists vs specialists using each introduced plant
ggplot(test_diet_prop, aes(x = nectar_species, y = count, fill = diet_pref)) +
geom_bar(stat = "identity", position = "dodge") +  # Side-by-side bars
labs(x = "Introduced Species", y = "Count of Generalists/Specialists",
title = "Diet Preference for the 5 Most Common Introduced Species") +
scale_fill_manual(values = c("generalist" = "lightblue", "specialist" = "lightcoral")) +  # Customize colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 5: Create a bar plot showing the proportion of generalists vs specialists using each introduced plant
ggplot(test_diet_prop, aes(x = nectar_species, y = Proporation, fill = diet_pref)) +
geom_bar(stat = "identity", position = "dodge") +  # Side-by-side bars
labs(x = "Introduced Species", y = "Count of Generalists/Specialists",
title = "Diet Preference for the 5 Most Common Introduced Species") +
scale_fill_manual(values = c("generalist" = "lightblue", "specialist" = "lightcoral")) +  # Customize colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 5: Create a bar plot showing the proportion of generalists vs specialists using each introduced plant
ggplot(test_diet_prop, aes(x = nectar_species, y = Proportion, fill = diet_pref)) +
geom_bar(stat = "identity", position = "dodge") +  # Side-by-side bars
labs(x = "Introduced Species", y = "Count of Generalists/Specialists",
title = "Diet Preference for the 5 Most Common Introduced Species") +
scale_fill_manual(values = c("generalist" = "lightblue", "specialist" = "lightcoral")) +  # Customize colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
native_species <- general_matrix %>%
filter(native_status == "native")
# Step 2: Find the 5 most common native species by nectar_species
top_5_native_species <- native_species %>%
group_by(nectar_species) %>%
summarise(count = n(), .groups = "drop") %>%
arrange(desc(count)) %>%
head(5)  # Select the top 5 most common native species
# Step 3: Filter the original dataset to include only the top 5 native species
top_5_native_data <- native_species %>%
filter(nectar_species %in% top_5_native_species$nectar_species)
# Step 4: Group by nectar_species and diet_pref, and calculate the count of occurrences for each combination
diet_proportion_native_data <- top_5_native_data %>%
group_by(nectar_species, diet_pref) %>%
summarise(count = n(), .groups = "drop")
diet_proportion_native_data <- diet_proportion_native_data %>%
group_by(nectar_species) %>%
mutate(Proportion = count / sum(count))
# Step 5: Create a bar plot showing the proportion of generalists vs specialists using each native plant
ggplot(diet_proportion_native_data, aes(x = nectar_species, y = Proportion, fill = diet_pref)) +
geom_bar(stat = "identity", position = "dodge") +  # Side-by-side bars
labs(x = "Native Species", y = "Count of Generalists/Specialists",
title = "Diet Preference for the 5 Most Common Native Species") +
scale_fill_manual(values = c("Generalist" = "lightblue", "Specialist" = "lightcoral")) +  # Customize colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 5: Create a bar plot showing the proportion of generalists vs specialists using each native plant
ggplot(diet_proportion_native_data, aes(x = nectar_species, y = Proportion, fill = diet_pref)) +
geom_bar(stat = "identity", position = "dodge") +  # Side-by-side bars
labs(x = "Native Species", y = "Count of Generalists/Specialists",
title = "Diet Preference for the 5 Most Common Native Species") +
scale_fill_manual(values = c("generalist" = "lightblue", "specialist" = "lightcoral")) +  # Customize colors
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
